package com.example.starter_backend.controller;

import com.example.starter_backend.dto.RegistrationRequest;
import com.example.starter_backend.entity.Member;
import com.example.starter_backend.entity.User; // Ensure User is imported
import com.example.starter_backend.service.MemberService; // Ensure MemberService is imported
import com.example.starter_backend.service.UserService; // Ensure UserService is imported
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus; // Import HttpStatus
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate; // Ensure LocalDate is imported

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UserService userService; // Autowire UserService

    @Autowired
    private MemberService memberService; // Autowire MemberService

    // Removed direct repository autowiring here, as service layer should handle it
    // @Autowired
    // private com.example.starter_backend.repository.UserRepository userRepository;

    @PostMapping("/register")
    public ResponseEntity<String> register(@RequestBody RegistrationRequest request) {
        try {
            // 1. Create and save the Member entity FIRST
            Member member = new Member();
            member.setName(request.getName());
            member.setAddress(request.getAddress());
            member.setContactInfo(request.getContactInfo());
            member.setEmail(request.getEmail());
            member.setNric(request.getNric());
            member.setMobile(request.getMobile());
            member.setRemark(request.getRemark());
            // Parse birthday from String to LocalDate
            if (request.getBirthday() != null && !request.getBirthday().isEmpty()) {
                member.setBirthday(LocalDate.parse(request.getBirthday()));
            } else {
                // Handle case where birthday might be optional or set a default
                member.setBirthday(null); // Or LocalDate.MIN, or throw error
            }
            member.setSex(request.getSex());
            // Set registration date, default to today if not provided in request
            member.setRegistrationDate(request.getRegistrationDate() != null ? request.getRegistrationDate() : LocalDate.now());
            // Set membership expiry date, default to 3 years from registration if not provided
            member.setMembershipExpiryDate(request.getMembershipExpiryDate() != null ? request.getMembershipExpiryDate() : member.getRegistrationDate().plusYears(3));

            // Save the member entity to get its generated ID
            Member savedMember = memberService.addMember(member); // Use the service to save

            // 2. Create and save the User entity, linking to the saved Member
            // The isAdmin field in RegistrationRequest allows you to control role
            User registeredUser = userService.registerUser(
                    request.getUsername(),
                    request.getPassword(),
                    savedMember, // Pass the PERSISTED Member object here
                    request.isAdmin() // Use the admin flag from the request
            );

            return ResponseEntity.status(HttpStatus.CREATED).body("User registered successfully with username: " + registeredUser.getUsername());
        } catch (RuntimeException e) {
            // Catch specific exceptions if needed, e.g., UsernameAlreadyExistsException
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Registration failed: " + e.getMessage());
        } catch (Exception e) {
            // Generic catch-all for unexpected errors
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An unexpected error occurred during registration: " + e.getMessage());
        }
    }

    // You might also have a /login endpoint here, similar to your frontend's Login.jsx
    // For brevity, not including it here, but it would involve authentication logic.
}