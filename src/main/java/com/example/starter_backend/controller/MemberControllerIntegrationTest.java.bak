package com.example.starter_backend.controller;

import com.example.starter_backend.entity.Member;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.*;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.client.RestTemplate;
import org.springframework.boot.test.web.client.TestRestTemplate;

import java.time.LocalDate;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test") // optional: use a test profile to avoid affecting real DB
public class MemberControllerIntegrationTest {

    @LocalServerPort
    private int port;

    private String baseUrl;

    @Autowired
    private TestRestTemplate restTemplate;

    @BeforeEach
    public void setup() {
        baseUrl = "http://localhost:" + port + "/api/members";
    }

    @Test
    public void testAddGetDeleteMember() {
        // Create a new member
        Member newMember = new Member();
        newMember.setName("John Doe");
        newMember.setAddress("123 Main St");
        newMember.setContactInfo("john@example.com");
        newMember.setRegistrationDate(LocalDate.now());

        // POST: add new member
        ResponseEntity<Member> postResponse = restTemplate.postForEntity(baseUrl, newMember, Member.class);
        assertThat(postResponse.getStatusCode()).isEqualTo(HttpStatus.OK);

        Member createdMember = postResponse.getBody();
        assertThat(createdMember).isNotNull();
        assertThat(createdMember.getId()).isNotNull();
        assertThat(createdMember.getName()).isEqualTo("John Doe");

        Long memberId = createdMember.getId();

        // GET: retrieve the member by ID
        ResponseEntity<Member> getResponse = restTemplate.getForEntity(baseUrl + "/" + memberId, Member.class);
        assertThat(getResponse.getStatusCode()).isEqualTo(HttpStatus.OK);
        Member fetchedMember = getResponse.getBody();
        assertThat(fetchedMember).isNotNull();
        assertThat(fetchedMember.getName()).isEqualTo("John Doe");

        // DELETE: delete the member
        restTemplate.delete(baseUrl + "/" + memberId);

        // GET again should return 404
        ResponseEntity<Member> getAfterDelete = restTemplate.getForEntity(baseUrl + "/" + memberId, Member.class);
        assertThat(getAfterDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
    }

    @Test
    public void testGetAllMembers() {
        ResponseEntity<Member[]> response = restTemplate.getForEntity(baseUrl, Member[].class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Member[] members = response.getBody();
        assertThat(members).isNotNull();
    }

    @Test
    public void testSearchMembersByName() {
        String searchUrl = baseUrl + "/search?name=John";

        ResponseEntity<Member[]> response = restTemplate.getForEntity(searchUrl, Member[].class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Member[] members = response.getBody();
        assertThat(members).isNotNull();

        // Optionally check if returned members contain "John" in their name
        for (Member member : members) {
            assertThat(member.getName().toLowerCase()).contains("john");
        }
    }
}
