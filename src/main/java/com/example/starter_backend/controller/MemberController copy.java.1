package com.example.starter_backend.controller;

import com.example.starter_backend.dto.MemberDTO;
import com.example.starter_backend.entity.Member;
import com.example.starter_backend.service.MemberService;
import com.example.starter_backend.exception.MemberNotFoundException; // Import custom exception

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import org.springframework.security.core.Authentication; // Keep if still used elsewhere, otherwise remove

@RestController
@RequestMapping("/api/members")
public class MemberController {

    @Autowired
    private MemberService memberService;

    // Get all members
    @GetMapping
    public List<Member> getAllMembers() {
        System.out.println ("****************\nFetching all members\n");
        return memberService.getAllMembers();
        
    }

@GetMapping("/me")
 public ResponseEntity<Member> getCurrentMemberProfile(Authentication authentication) {
  try {
    System.out.println ("\n****************\n getCurrentMemberProfile\n");
   String username = authentication.getName(); // Get username from Authentication
   // Assuming your User entity has a 'member' field that links to the Member entity
 System.out.println("\n****************\n username: " + username + "\n");

   org.springframework.security.core.userdetails.User userDetails = 
       (org.springframework.security.core.userdetails.User) authentication.getPrincipal(); // Cast to Spring Security User
   //String username = userDetails.getUsername(); // Get username

   // Fetch member by username (assuming you have such a method)
   Optional<Member> member = memberService.getMemberByUsername(username); // Implement this in your service
  

   if (member.isPresent()) {
    System.out.println("\n****************\n Member found: " + member.get().getName() + "\n");
    return ResponseEntity.ok(member.get());
   } else {
    return ResponseEntity.notFound().build();
   }
}   catch (Exception e) {
    System.out.println("\n****************\n Error fetching member profile: " + e.getMessage() + "\n");
   return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
 }
 }
    // Get member by ID
    @GetMapping("/{id}")
    public ResponseEntity<Member> getMemberById(@PathVariable Long id) {
        Optional<Member> member = memberService.getMemberById(id);
        return member.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // Create a new member
    @PostMapping
    public ResponseEntity<Member> createMember(@Valid @RequestBody MemberDTO memberDTO) {
        Member member = new Member();
        member.setName(memberDTO.getName());
        member.setAddress(memberDTO.getAddress());
        member.setContactInfo(memberDTO.getContactInfo());
        member.setEmail(memberDTO.getEmail());
        member.setNric(memberDTO.getNric());
        member.setMobile(memberDTO.getMobile());
        member.setRemark(memberDTO.getRemark());
        member.setBirthday(memberDTO.getBirthday());
        member.setSex(memberDTO.getSex());
        member.setRegistrationDate(memberDTO.getRegistrationDate());
        member.setMembershipExpiryDate(
                memberDTO.getMembershipExpiryDate() != null
                        ? memberDTO.getMembershipExpiryDate()
                        : memberDTO.getRegistrationDate().plusYears(3));

        Member savedMember = memberService.addMember(member);
        return new ResponseEntity<>(savedMember, HttpStatus.CREATED);
    }

    // Update member by ID
    @PutMapping("/{id}")
    public ResponseEntity<Member> updateMember(@PathVariable Long id, @RequestBody MemberDTO memberDTO) {
        try {
            // Retrieve the existing member first
            Optional<Member> existingMemberOpt = memberService.getMemberById(id);
            if (!existingMemberOpt.isPresent()) {
                throw new MemberNotFoundException(id); // Throw custom exception if not found
            }

            Member existingMember = existingMemberOpt.get();

            // Update the fields of the existing member with data from the DTO
            existingMember.setName(memberDTO.getName());
            existingMember.setAddress(memberDTO.getAddress());
            existingMember.setContactInfo(memberDTO.getContactInfo());
            existingMember.setEmail(memberDTO.getEmail());
            existingMember.setNric(memberDTO.getNric());
            existingMember.setMobile(memberDTO.getMobile());
            existingMember.setRemark(memberDTO.getRemark());
            existingMember.setBirthday(memberDTO.getBirthday());
            existingMember.setSex(memberDTO.getSex());
            existingMember.setRegistrationDate(memberDTO.getRegistrationDate());
            existingMember.setMembershipExpiryDate(memberDTO.getMembershipExpiryDate());

            // Pass the updated existing Member object to the service layer
            Member updatedMember = memberService.updateMember(existingMember); // Using the overload that takes a Member
                                                                               // object
            return ResponseEntity.ok(updatedMember);
        } catch (MemberNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // Handle not found specifically
        } catch (Exception ex) {
            // Catch any other unexpected exceptions
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // Delete member
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMember(@PathVariable Long id) {
        try {
            memberService.deleteMember(id);
            return ResponseEntity.noContent().build();
        } catch (MemberNotFoundException ex) { // Assuming deleteMember also throws MemberNotFoundException
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // Search members by name
    @GetMapping("/search")
    public List<Member> searchMembersByName(@RequestParam String name) {
        return memberService.searchMembersByName(name);
    }
}
